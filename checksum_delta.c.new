#include <stdio.h>
#include <stdint.h>
#include <time.h>
#include <sys/time.h>
#include <stdlib.h>
#include <unistd.h>

uint16_t checksum(uint16_t *addr, int len)
{
	int count = len;
	register uint32_t sum = 0;
	uint16_t answer = 0;

	while(count > 1) {
		sum += *(addr++);
		count -= 2;
	}

	while(sum >> 16)
		sum = (sum & 0xffff) + (sum >> 16);
	
	answer = ~sum;
	return answer;	
}

uint16_t checksum_delta(uint16_t checksum_old, int diff)
{
	uint32_t checksum_new;

	checksum_old = ~checksum_old;

	if(diff < 0 && checksum_old < -diff) {
		uint16_t n = (-diff) / 0xffff;
		checksum_new = checksum_old + (n + 1) * 0xffff + diff;
	} else {
		checksum_new = checksum_old + diff;
	}

	while(checksum_new >> 16)
		checksum_new = (checksum_new & 0xffff) + (checksum_new >> 16);

	if(checksum_new == 0)
		return 0;

	return (uint16_t)(~checksum_new);
}

static inline int diff_cal(uint16_t *old, uint16_t *new, int len)
{
	int diff = 0;

	for(int i = 0; i < len; i++)
		diff += new[i] - old[i];

	return diff;
}

uint16_t checksum_delta_method(uint16_t checksum_old, uint16_t *old, uint16_t *new, int len)
{
	int diff = diff_cal(old, new, len);
	
	return checksum_delta(checksum_old, diff);
}

#define PKT_SZ 750
#define CYCLES 1000000

int main() 
{
	uint16_t checksum_old, checksum_new, checksum_delta; 
	struct timeval start, end;
	static time_t sec1, usec1, sec2, usec2, usec;
	uint16_t a[PKT_SZ];
	uint16_t b[PKT_SZ];

	srand(time(NULL));

	for(int j = 0; j < PKT_SZ; j++) {
		a[j] = rand() % 65535;
		b[j] = j >= 6? a[j] : rand() % 65535;
	}
	
	gettimeofday(&start, NULL);
	for(int i = 0; i < CYCLES; i++){
		checksum_new = checksum(b, PKT_SZ * 2);
	}
	gettimeofday(&end, NULL);
	sec1 += end.tv_sec - start.tv_sec;
	usec = end.tv_usec - start.tv_usec;	
	if(usec < 0) {
		usec1 += 1000000 + usec;
		sec1 -= 1;
	} else {
		usec1 += usec;
	}

	checksum_old = checksum(a, PKT_SZ * 2);
	gettimeofday(&start, NULL);
	for(int i = 0; i < CYCLES; i++){
		checksum_delta = checksum_delta_method(checksum_old, a, b, 6);
	}
	gettimeofday(&end, NULL);
	sec2 += end.tv_sec - start.tv_sec;
	usec = end.tv_usec - start.tv_usec;	
	if(usec < 0) {
		usec2 += 1000000 + usec;
		sec2 -= 1;
	} else {
		usec2 += usec;
	}

	int s = usec1 / 1000000;
        if(s > 0) {
		sec1 += s;
		usec1 %= 1000000;
	}	
	s = usec2 / 1000000;
        if(s > 0) {
		sec2 += s;
		usec2 %= 1000000;
	}
	printf("Time used (old): s = %u, us = %u\n", sec1, usec1);
	printf("Time used (new): s = %u, us = %u\n", sec2, usec2);
}
